# ############################################################################
# Model: SSL: Implementation of Best-RQ
# Encoder: Conformer Encoder w/Random Projection Quantizer
# Training: Librispeech 960h
# Authors:  Ryan
# ############################################################################
# Seed needs to be set at top of yaml, before objects with parameters are made

seed: 1000
__set_seed: !apply:torch.manual_seed [!ref <seed>]

project_name: alt-attention
experiment_name: brq_mamba_bidirectional_conformer
architecture: brq-conformer-mamba-bidirectional
wandb_offline: True

data_folder: /gpfsdswork/dataset/LibriSpeechAsrCorpus
output_folder: !ref results/brq/<seed>
sim_test_time: 10
sim_batch_size: 10

ckpt_interval_min: 15
save_folder: !ref <output_folder>/save
# Logging file for every N optimizer steps (many lines)
train_steps_log: !ref <output_folder>/train_steps_log.txt
# Logging file per epoch
train_stage_log: !ref <output_folder>/train_stage_log.txt

train_splits: ["train-clean-100", "train-clean-360", "train-other-500"]
dev_splits: ["dev-clean"]
test_splits: ["test-clean"]
train_csv: !ref <output_folder>/train.csv
valid_csv: !ref <output_folder>/dev-clean.csv
skip_prep: False

avoid_if_longer_than: 60.0
avoid_if_shorter_than: 2.0
log_interval: 500 # Logging every N optimizer steps
precision: bf16
max_grad_norm: 10.


# The training will either stops at number_of_epochs or optimizer_step_limit
# I.e. the first that is reached.
number_of_epochs: 1000
optimizer_step_limit: 205000

seconds_per_batch: 400 
train_num_buckets: 150
grad_accumulation_factor: 2

train_dataloader_options:
   num_workers: 2

test_dataloader_options:
   batch_size:  8 # DynamicBatching not used at testing time
   num_workers: 2

# Training parameters (based on Section 4.1.1)
lr: 0.0008
weight_decay: 0.01
warmup: 25000

# Feature parameters
sample_rate: 16000
n_fft: 400
n_mels: 80
hop_length: 10
pad_to_divisible_by: 4 
# this is because the convolutions reduction dim by 4 
# so the input to quantizer also needs to reduce dim by 4

####################### Model parameters ###########################
# Transformer
d_model: 474
nhead: 8 # table 1 https://arxiv.org/pdf/2010.10504.pdf
num_encoder_layers: 12 # section 4.1.1
num_decoder_layers: 0
d_ffn: 2048
transformer_dropout: 0.1
activation: !name:torch.nn.GELU
output_neurons: 5000
encoder_layerdrop: 0.05

# 15% masking
mask_length: 4 # for 400ms
mask_prob: 0.15
noise_mean: 0
noise_std: 0.1

# quantizer parameter
p_input: 320
cb_dim: 16
cb_vocab: 8192


############################## models ################################

CNN: !new:speechbrain.lobes.models.convolution.ConvolutionFrontEnd
    input_shape: (8, 10, 80)
    num_blocks: 2
    num_layers_per_block: 1
    out_channels: (128, 32)
    kernel_sizes: (3, 3)
    strides: (2, 2)
    residuals: (False, False)

Transformer: !new:speechbrain.lobes.models.transformer.TransformerASR.TransformerASR # yamllint disable-line rule:line-length
    input_size: 640
    tgt_vocab: !ref <output_neurons>
    d_model: !ref <d_model>
    nhead: !ref <nhead>
    num_encoder_layers: !ref <num_encoder_layers>
    num_decoder_layers: !ref <num_decoder_layers>
    d_ffn: !ref <d_ffn>
    dropout: !ref <transformer_dropout>
    activation: !ref <activation>
    encoder_module: conformer
    attention_type: mamba
    normalize_before: True
    causal: False
    layerdrop_prob: !ref <encoder_layerdrop>
    bidirectional: True

# We must call an encoder wrapper so the decoder isn't run (we don't have any)
wrapper: !new:speechbrain.lobes.models.transformer.TransformerASR.EncoderWrapper
   transformer: !ref <Transformer>


Quantizer: !new:.quantiser.RandomProjectionQuantizer
    # projection
    input_dim: !ref <p_input>
    # codebook
    cb_dim: !ref <cb_dim>    
    cb_vocab: !ref <cb_vocab>

linear: !new:speechbrain.nnet.linear.Linear
    input_size: !ref <d_model>
    n_neurons: !ref <cb_vocab>

modules:
    CNN: !ref <CNN>
    wrapper: !ref <wrapper>
    Quantizer: !ref <Quantizer>
    normalize: !ref <normalize>
    linear: !ref <linear>

model: !new:torch.nn.ModuleList
    - [!ref <CNN>, !ref <wrapper>, !ref <Quantizer>, !ref <linear>]

compute_features: !new:speechbrain.lobes.features.Fbank
    sample_rate: !ref <sample_rate>
    n_fft: !ref <n_fft>
    n_mels: !ref <n_mels>

normalize: !new:speechbrain.processing.features.InputNormalization
    norm_type: global
    update_until_epoch: 4

############################## augmentation ################################


# Speed perturbation
speed_changes: [95, 100, 105]  # List of speed changes for time-stretching

speed_perturb: !new:speechbrain.augment.time_domain.SpeedPerturb
   orig_freq: !ref <sample_rate>
   speeds: !ref <speed_changes>

# Frequency drop: randomly drops a number of frequency bands to zero.
drop_freq_low: 0  # Min frequency band dropout probability
drop_freq_high: 1  # Max frequency band dropout probability
drop_freq_count_low: 1  # Min number of frequency bands to drop
drop_freq_count_high: 3  # Max number of frequency bands to drop
drop_freq_width: 0.05  # Width of frequency bands to drop

drop_freq: !new:speechbrain.augment.time_domain.DropFreq
   drop_freq_low: !ref <drop_freq_low>
   drop_freq_high: !ref <drop_freq_high>
   drop_freq_count_low: !ref <drop_freq_count_low>
   drop_freq_count_high: !ref <drop_freq_count_high>
   drop_freq_width: !ref <drop_freq_width>

# Time drop: randomly drops a number of temporal chunks.
drop_chunk_count_low: 1  # Min number of audio chunks to drop
drop_chunk_count_high: 5  # Max number of audio chunks to drop
drop_chunk_length_low: 1000  # Min length of audio chunks to drop
drop_chunk_length_high: 2000  # Max length of audio chunks to drop

drop_chunk: !new:speechbrain.augment.time_domain.DropChunk
   drop_length_low: !ref <drop_chunk_length_low>
   drop_length_high: !ref <drop_chunk_length_high>
   drop_count_low: !ref <drop_chunk_count_low>
   drop_count_high: !ref <drop_chunk_count_high>

# Augmenter: Combines previously defined augmentations to perform data augmentation
wav_augment: !new:speechbrain.augment.augmenter.Augmenter
   parallel_augment: False
   concat_original: True
   repeat_augment: 1
   shuffle_augmentations: False
   min_augmentations: 4
   max_augmentations: 4
   augment_prob: 1.0
   augmentations: [
      !ref <speed_perturb>,
      !ref <drop_freq>,
      !ref <drop_chunk>]


############################## running ################################

epoch_counter: !new:speechbrain.utils.epoch_loop.EpochCounter
   limit: !ref <number_of_epochs>


train_steps_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
   save_file: !ref <train_steps_log>

train_stage_logger: !new:speechbrain.utils.train_logger.FileTrainLogger
   save_file: !ref <train_stage_log>

optimizer: !name:torch.optim.AdamW
    lr: !ref <lr>
    betas: (0.9, 0.98)
    weight_decay: !ref <weight_decay>

noam_annealing: !new:speechbrain.nnet.schedulers.NoamScheduler
    lr_initial: !ref <lr>
    n_warmup_steps: 25000

checkpointer: !new:speechbrain.utils.checkpoints.Checkpointer
    checkpoints_dir: !ref <save_folder>
    recoverables:
        model: !ref <model>
        noam_scheduler: !ref <noam_annealing>
        normalizer: !ref <normalize>
        counter: !ref <epoch_counter>
